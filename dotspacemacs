;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers () ;
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     helm
     deft
     (osx :variables
          osx-dictionary-dictionary-choice "English"
          osx-use-option-as-meta t)
     dash
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-enable-sort-by-usage t)
     emacs-lisp
     git
     docker
     (markdown :variables
               markdown-live-preview-engine 'vmd)
     ;; org
     shell-scripts
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom
            shell-default-shell 'eshell
            shell-protect-eshell-prompt t)
     (spell-checking :variables
                     spell-checking-enable-auto-dictionary nil
                     spell-checking-enable-by-default t)
     syntax-checking
     colors
     (version-control :variables
                      version-control-diff-tool 'diff-hl
                      version-control-global-margin t
                      version-control-diff-side 'left)
     csv
     html
     javascript
     python
     yaml
     (debug :variables
            debug-additional-debuggers '("remake" "gub"))
     (haskell :variables
              haskell-completion-backend 'intero
              haskell-enable-hindent-style "johan-tibell"
              haskell-indentation-where-post-offset 1
              haskell-interactive-mode-hide-multi-line-errors nil
              haskell-process-prompt-restart-on-cabal-change nil
              haskell-process-suggest-remove-import-lines nil
              haskell-stylish-on-save t
              haskell-tags-on-save t)
     extra-langs
     ruby
     sql
     react
     java
     (go :variables
         gofmt-command "goimports"
         go-tab-width 4
         go-use-gometalinter 'nil
         go-use-gocheck-for-testing t)
     )
   dotspacemacs-additional-packages '(all-the-icons
                                      all-the-icons-dired
                                      arduino-mode
                                      doom-themes
                                      doom-modeline
                                      solaire-mode
                                      highlight-indent-guides
                                      hl-fill-column
                                      evil-goggles
                                      unicode-fonts
                                      direnv
                                      makefile-executor
                                      editorconfig
                                      string-inflection
                                      yasnippet-snippets
                                      beacon
                                      go-tag
                                      flyspell-lazy)
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https nil
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update nil
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner "~/.emacs.d/private/+leodev/banner.png"
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(doom-one)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Source Code Pro for Powerline"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.0)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-remap-Y-to-y$ nil
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-visual-line-move-text nil
   dotspacemacs-ex-substitute-global nil
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-large-file-size 1
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 50
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-unicode-symbols nil
   dotspacemacs-smooth-scrolling nil
   dotspacemacs-line-numbers t
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  ;; fix a problem with X11 to windows
  ;; https://emacs.stackexchange.com/questions/41021/emacs-26-1-rc1-display-issues-over-ssh-x11-with-xming-vcxsrv
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=32306
  (setq default-frame-alist
        (append default-frame-alist '((inhibit-double-buffering . t))))
  )

(defun dotspacemacs/user-config ()
  ;; GLOBAL

  ;; If you experience freezing, decrease this. If you experience stuttering, increase this.
  ;; 16mb = 16777216
  ;; 256mb = 268435456
  ;; 512mb = 536870912
  (setq gc-cons-threshold 268435456)

  (setq-default
   ;; spell-checking
   ispell-program-name "aspell"
   ispell-dictionary "en_US"
   flyspell-issue-message-flag nil
   ;; shell
   shell-pop-full-span nil
   ;; GoLang
   flycheck-gometalinter-vendor t
   flycheck-gometalinter-fast t
   flycheck-gometalinter-test t
   flycheck-gometalinter-deadline "10s"
   flycheck-disabled-checkers (append flycheck-disabled-checkers '(go-megacheck))

   evil-want-fine-undo t
   projectile-enable-caching t
   projectile-use-git-grep t
   inhibit-compacting-font-caches t)

  (diff-hl-flydiff-mode '(:global t))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

  (use-package yasnippet-snippets
    :ensure t
    :after (yasnippet)
    :config
    (yasnippet-snippets-initialize)
    :init
    (setq yas-snippet-dirs nil)
    (push yasnippet-snippets-dir yas-snippet-dirs)
    )

  (use-package all-the-icons :ensure t)
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package unicode-fonts
    :ensure t
    :custom (unicode-fonts-force-multi-color-on-mac t)
    :config (unicode-fonts-setup))

  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (nlinum-highlight-current-line t)
    :config
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    :init
    (setq vcm (car (cdr (assq 'vc-modified doom-themes--colors)))
          vcd (car (cdr (assq 'vc-deleted doom-themes--colors)))
          vca (car (cdr (assq 'vc-added doom-themes--colors))))
    (custom-set-faces
     `(diff-hl-change ((t (:background ,(doom-darken vcm 0.60)))))
     `(diff-hl-insert ((t (:background ,(doom-darken vca 0.60)))))
     `(diff-hl-delete ((t (:background ,(doom-darken vcd 0.60)))))))

  (use-package doom-modeline
    :ensure t
    :requires (all-the-icons)
    :custom
    (doom-modeline-height 25)
    (doom-modeline-bar-width 3)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-buffer-file-name-style 'relative-from-project)
    :hook (after-init . doom-modeline-mode)
    :init (doom-modeline-mode 1))

  (use-package beacon
    :after (doom-themes)
    :ensure t
    :init (beacon-mode t))

  (use-package solaire-mode
    :ensure t
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (solaire-global-mode +1)
    (solaire-mode-swap-bg))

  (use-package highlight-indent-guides
    :ensure t
    :hook
    ((prog-mode text-mode conf-mode) . highlight-indent-guides-mode)
    (focus-in . highlight-indent-guides-auto-set-faces)
    :config
    (setq highlight-indent-guides-auto-odd-face-perc 30
          highlight-indent-guides-auto-even-face-perc 30
          highlight-indent-guides-auto-character-face-perc 10
          highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive t))

  (use-package hl-fill-column
    :requires (doom-themes)
    :ensure t
    :hook ((text-mode prog-mode conf-mode) . hl-fill-column-mode)
    :config
    (setq bg (car (cdr (assq 'base0 doom-themes--colors)))
          fg (car (cdr (assq 'cyan doom-themes--colors))))
    (custom-set-faces `(hl-fill-column-face ((t (:background ,bg :foreground ,fg))))))

  (use-package neotree
    :custom
    (neo-create-file-auto-open nil)
    (neo-auto-indent-point nil)
    (neo-autorefresh nil)
    (neo-mode-line-type 'none)
    (neo-window-width 28)
    (neo-show-updir-line nil)
    (neo-theme 'nerd) ; fallback
    (neo-banner-message nil)
    (neo-confirm-create-file #'off-p)
    (neo-confirm-create-directory #'off-p)
    (neo-show-hidden-files nil)
    (neo-keymap-style 'concise)
    (neo-show-hidden-files t)
    (neo-hidden-regexp-list
     '(;; vcs folders
       "^\\.\\(?:git\\|hg\\|svn\\)$"
       ;; compiled files
       "\\.\\(?:pyc\\|o\\|elc\\|lock\\|css.map\\|class\\)$"
       ;; generated files, caches or local pkgs
       "^\\(?:node_modules\\|vendor\\|.\\(project\\|cask\\|yardoc\\|sass-cache\\)\\)$"
       ;; org-mode folders
       "^\\.\\(?:sync\\|export\\|attach\\)$"
       ;; temp files
       "~$"
       "^#.*#$")))

  (use-package evil-goggles
    :ensure t
    :custom
    ;; (evil-goggles-duration 0.250)
    (evil-goggles-pulse t) ; too slow
    (evil-goggles-enable-delete nil)
    (evil-goggles-enable-change nil)
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))

  (use-package direnv
    :ensure t
    :config
    (direnv-mode))

  (use-package magit-gitflow
    :ensure t
    :hook (magit-mode . turn-on-magit-gitflow))

  (use-package makefile-executor
    :config
    (add-hook 'makefile-mode-hook 'makefile-executor-mode))

  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))

  (use-package string-inflection
    :init
    (progn
      (spacemacs/set-leader-keys
        "xii" 'string-inflection-all-cycle
        "xiu" 'string-inflection-underscore
        "xiU" 'string-inflection-upcase
        "xik" 'string-inflection-kebab-case
        "xic" 'string-inflection-lower-camelcase
        "xiC" 'string-inflection-camelcase)))

  (use-package go-tag
    :defer t
    :custom
    (go-tag-args (list "-transform" "camelcase"))
    :init (spacemacs/set-leader-keys-for-major-mode 'go-mode
            "rf" 'go-tag-add
            "rF" 'go-tag-remove))

  (use-package flyspell-lazy
    :ensure t
    :after (flyspell)
    :init
    (add-to-list 'ispell-extra-args "--sug-mode=ultra")
    :config
    (flyspell-lazy-mode 1)
    (setq ;; Be a little more aggressive than the lazy defaults
     flyspell-lazy-idle-seconds 2 ;; This scans just the recent changes
     flyspell-lazy-window-idle-seconds 6 ;; This scans the whole window
     ))
  )
;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
